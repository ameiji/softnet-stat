#[macro_use] extern crate nom;

use nom::{IResult, space, alphanumeric, hex_u32, line_ending};

use std::io;
use std::io::prelude::*;
use std::fs::File;

/// Network data processing statistics
#[derive(Debug)]
struct SoftnetStat {
    pub cpu: String,
    /// The number of network frames processed.
	///
	/// This can be more than the total number of network frames received if
	/// you are using ethernet bonding. There are cases where the ethernet
	/// bonding driver will trigger network data to be re-processed, which
	/// would increment the processed count more than once for the same packet.
    pub processed: u32,

	/// The number of network frames dropped because there was no room on the processing queue.
    pub dropped: u32,

	/// The number of times the `net_rx_action` loop terminated because the budget was consumed or
    /// the time limit was reached, but more work could have been.
    pub time_squeeze: u32,

	/// The number of times a collision occurred when trying to obtain a device lock
    /// when transmitting packets.
    pub cpu_collision: u32,
}

named!(parse_softnet_stats(&[u8]) -> Vec<SoftnetStat>,
    many1!(
        parse_softnet_line
    )
);

named!(parse_softnet_line(&[u8]) -> SoftnetStat,
    chain!(
        cpu: map_res!(
            alphanumeric,
            std::str::from_utf8
        ) ~
        space ~
        processed: hex_u32 ~
        space ~
        dropped: hex_u32 ~
        space ~
        time_squeeze: hex_u32 ~
        space ~
        hex_u32 ~
        space ~
        hex_u32 ~
        space ~
        hex_u32 ~
        space ~
        hex_u32 ~
        space ~
        hex_u32 ~
        space ~
        cpu_collision: hex_u32 ~
        line_ending ,

        || SoftnetStat {
            cpu: cpu.to_string(),
            processed: processed,
            dropped: dropped,
            time_squeeze: time_squeeze,
            cpu_collision: cpu_collision,
        }
    )
);

fn main() {
    let file = "/Users/herman/projects/softnet-stat/tests/proc-net-softnet_stat-2_6_32";
    let raw = read_proc_file(file).expect("Failed to open softnet stats file");

    let stats = match parse_softnet_stats(&raw) {
        IResult::Done(_, o) => o,
        IResult::Error(_) => panic!("Error while parsing {}", file),
        IResult::Incomplete(_) => panic!("{} is in an unsupported format", file),
    };

    print(&stats, 15);
}

fn read_proc_file(file: &str) -> io::Result<Vec<u8>> {
    let mut f = try!(File::open(file));

    let mut buf= vec![];
    try!(f.read_to_end(&mut buf));

    //debug!("proc file output = {:?}", &raw);

    Ok(buf)
}

fn print(stats: &Vec<SoftnetStat>, spacer: usize) {
    println!("{:<spacer$}{:<spacer$}{:<spacer$}{:<spacer$}{:<spacer$}", "Cpu", "Processed", "Dropped", "Time Squeezed", "Cpu Collision", spacer=spacer);

	for stat in stats {
        println!("{:<spacer$}{:<spacer$}{:<spacer$}{:<spacer$}{:<spacer$}", stat.cpu, stat.processed, stat.dropped, stat.time_squeeze, stat.cpu_collision, spacer=spacer);
	}
}
